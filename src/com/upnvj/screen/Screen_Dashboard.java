/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.upnvj.screen;

import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import java.text.NumberFormat;
import java.util.Locale;

import com.upnvj.Program;
import com.upnvj.Account;

/**
 *
 * @author DAPIT
 */
public class Screen_Dashboard extends javax.swing.JFrame {
    
    
    /**
     * Creates new form Screen_Dashboard
     */
    public Screen_Dashboard() {
        initComponents();
    }
    
    private Program program;
    private Account acc;
    private String fullName;
    private String cardNum;
    private String exDate;
    private String cardType;
    private int cardBalance;

    private DefaultTableModel tableModel = new DefaultTableModel();
    private String[][] rowTable;
    
    public void getDetails(Program p) {
        this.program = p;
        this.acc = p.getAccount();

        fullName = acc.getName();
        cardNum = splitCardNum(Long.toString(acc.getCardNumber()));
        exDate = acc.getExpDate();
        cardType = program.getCardType();
        cardBalance = acc.getBalance();
    }
    
    public void setValue() {
        label_fullName.setText(fullName);
        label_cardNum.setText(cardNum);
        label_exDate.setText(exDate);
        label_cardType.setText(cardType);
        label_cardBalance.setText(formatBalance(cardBalance));
        rowTable = program.getRowTable(); // String[][] array of String
        
    }

    public static String splitCardNum(String s) {
        String[] arr = s.split("(?<=\\G.{" + 4 + "})");
        return String.join(" ", arr);
    }

    public String formatBalance(int number) {
        NumberFormat format = NumberFormat.getCurrencyInstance(new Locale("in", "ID"));
        String s = format.format(number);
        return s;
     }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    
    private void initComponents() {

        panel_sidePanel = new javax.swing.JPanel();
        panel_header = new javax.swing.JPanel();
        label_title = new javax.swing.JLabel();
        panel_account = new javax.swing.JPanel();
        label_iconUser = new javax.swing.JLabel();
        label_fullName = new javax.swing.JLabel();
        panel_transHistory = new javax.swing.JPanel();
        sp_transHistory = new javax.swing.JScrollPane();
        table_transHistory = new javax.swing.JTable();
        panel_footer = new javax.swing.JPanel();
        button_signOut = new javax.swing.JButton();
        panel_mainPanel = new javax.swing.JPanel();
        panel_creditCard = new javax.swing.JPanel();
        label_cardNum = new javax.swing.JLabel();
        label_exDate = new javax.swing.JLabel();
        label_balanceHeader = new javax.swing.JLabel();
        label_cardBalance = new javax.swing.JLabel();
        label_cardType = new javax.swing.JLabel();
        panel_buttonFeature = new javax.swing.JPanel();
        button_deposit = new javax.swing.JButton();
        label_deposit = new javax.swing.JLabel();
        button_withDraw = new javax.swing.JButton();
        label_withDraw = new javax.swing.JLabel();
        button_transfer = new javax.swing.JButton();
        label_transfer = new javax.swing.JLabel();
        button_emoney = new javax.swing.JButton();
        label_emoney = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple M-Banking");
        setMaximumSize(new java.awt.Dimension(840, 480));
        setMinimumSize(new java.awt.Dimension(840, 480));
        setResizable(false);

        panel_sidePanel.setBackground(new java.awt.Color(57, 62, 70));
        panel_sidePanel.setPreferredSize(new java.awt.Dimension(250, 480));

        panel_header.setBackground(new java.awt.Color(57, 62, 70));
        panel_header.setPreferredSize(new java.awt.Dimension(250, 60));
        panel_header.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 18));

        label_title.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        label_title.setForeground(new java.awt.Color(247, 247, 247));
        label_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_title.setText("Simple M-Banking");
        panel_header.add(label_title);

        panel_account.setBackground(new java.awt.Color(57, 62, 70));
        panel_account.setPreferredSize(new java.awt.Dimension(250, 60));

        label_iconUser.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        label_iconUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_iconUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("../icons/icon_user.png"))); // NOI18N
        label_iconUser.setPreferredSize(new java.awt.Dimension(48, 48));

        label_fullName.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        label_fullName.setForeground(new java.awt.Color(247, 247, 247));
        label_fullName.setText(fullName);
        label_fullName.setPreferredSize(new java.awt.Dimension(90, 22));

        javax.swing.GroupLayout panel_accountLayout = new javax.swing.GroupLayout(panel_account);
        panel_account.setLayout(panel_accountLayout);
        panel_accountLayout.setHorizontalGroup(
            panel_accountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_accountLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(label_iconUser, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_fullName, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_accountLayout.setVerticalGroup(
            panel_accountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_accountLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_accountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(label_fullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_iconUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panel_transHistory.setBackground(new java.awt.Color(57, 62, 70));
        panel_transHistory.setPreferredSize(new java.awt.Dimension(250, 250));

        sp_transHistory.setPreferredSize(new java.awt.Dimension(220, 230));

        table_transHistory.setBackground(new java.awt.Color(109, 152, 134));
        table_transHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {}, new String [] { "Date", "Type", "Balance" }
        ));
        table_transHistory.setMaximumSize(new java.awt.Dimension(220, 230));
        table_transHistory.setMinimumSize(new java.awt.Dimension(220, 230));
        table_transHistory.setPreferredSize(new java.awt.Dimension(220, 230));
        sp_transHistory.setViewportView(table_transHistory);

        panel_transHistory.add(sp_transHistory);

        panel_footer.setBackground(new java.awt.Color(57, 62, 70));
        panel_footer.setPreferredSize(new java.awt.Dimension(250, 60));

        button_signOut.setBackground(new java.awt.Color(57, 62, 70));
        button_signOut.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        button_signOut.setForeground(new java.awt.Color(247, 247, 247));
        button_signOut.setText("Sign out");
        button_signOut.setBorder(null);
        button_signOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_signOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_footerLayout = new javax.swing.GroupLayout(panel_footer);
        panel_footer.setLayout(panel_footerLayout);
        panel_footerLayout.setHorizontalGroup(
            panel_footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_footerLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(button_signOut)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_footerLayout.setVerticalGroup(
            panel_footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_footerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button_signOut)
                .addContainerGap())
        );

        javax.swing.GroupLayout panel_sidePanelLayout = new javax.swing.GroupLayout(panel_sidePanel);
        panel_sidePanel.setLayout(panel_sidePanelLayout);
        panel_sidePanelLayout.setHorizontalGroup(
            panel_sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel_account, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel_footer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel_transHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panel_sidePanelLayout.setVerticalGroup(
            panel_sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_sidePanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(panel_header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_account, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panel_transHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panel_footer, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        getContentPane().add(panel_sidePanel, java.awt.BorderLayout.WEST);

        panel_mainPanel.setBackground(new java.awt.Color(247, 247, 247));
        panel_mainPanel.setPreferredSize(new java.awt.Dimension(590, 480));

        panel_creditCard.setBackground(new java.awt.Color(57, 62, 70));
        panel_creditCard.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panel_creditCard.setPreferredSize(new java.awt.Dimension(460, 220));

        label_cardNum.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        label_cardNum.setForeground(new java.awt.Color(247, 247, 247));
        label_cardNum.setText(cardNum);

        label_exDate.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        label_exDate.setForeground(new java.awt.Color(247, 247, 247));
        label_exDate.setText(exDate);
        label_exDate.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        label_balanceHeader.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        label_balanceHeader.setForeground(new java.awt.Color(242, 231, 213));
        label_balanceHeader.setText("Balance");
        label_balanceHeader.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        label_cardBalance.setFont(new java.awt.Font("Poppins", 0, 24)); // NOI18N
        label_cardBalance.setForeground(new java.awt.Color(247, 247, 247));
        label_cardBalance.setText("Rp" + cardBalance + ",-");
        label_cardBalance.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        label_cardType.setFont(new java.awt.Font("Courier New", 1, 20)); // NOI18N
        label_cardType.setForeground(new java.awt.Color(247, 247, 247));
        label_cardType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        label_cardType.setText(cardType);
        label_cardType.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout panel_creditCardLayout = new javax.swing.GroupLayout(panel_creditCard);
        panel_creditCard.setLayout(panel_creditCardLayout);
        panel_creditCardLayout.setHorizontalGroup(
            panel_creditCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_creditCardLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(panel_creditCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_creditCardLayout.createSequentialGroup()
                        .addComponent(label_balanceHeader)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_creditCardLayout.createSequentialGroup()
                        .addGroup(panel_creditCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panel_creditCardLayout.createSequentialGroup()
                                .addComponent(label_cardBalance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label_cardType))
                            .addGroup(panel_creditCardLayout.createSequentialGroup()
                                .addComponent(label_cardNum)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 187, Short.MAX_VALUE)
                                .addComponent(label_exDate)))
                        .addGap(26, 26, 26))))
        );
        panel_creditCardLayout.setVerticalGroup(
            panel_creditCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_creditCardLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(panel_creditCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_cardNum)
                    .addComponent(label_exDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(label_balanceHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_creditCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_cardBalance)
                    .addComponent(label_cardType))
                .addGap(24, 24, 24))
        );

        panel_buttonFeature.setBackground(new java.awt.Color(247, 247, 247));
        panel_buttonFeature.setPreferredSize(new java.awt.Dimension(590, 100));

        button_deposit.setBackground(new java.awt.Color(57, 62, 70));
        button_deposit.setIcon(new javax.swing.ImageIcon(getClass().getResource("../icons/icon_topUp.png"))); // NOI18N
        button_deposit.setBorder(null);
        button_deposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_depositActionPerformed(evt);
            }
        });

        label_deposit.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        label_deposit.setText("Deposit");

        button_withDraw.setBackground(new java.awt.Color(57, 62, 70));
        button_withDraw.setIcon(new javax.swing.ImageIcon(getClass().getResource("../icons/icon_withDraw.png"))); // NOI18N
        button_withDraw.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        button_withDraw.setBorderPainted(false);
        button_withDraw.setPreferredSize(new java.awt.Dimension(64, 64));
        button_withDraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_withDrawActionPerformed(evt);
            }
        });

        label_withDraw.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        label_withDraw.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_withDraw.setText("Withdraw");

        button_transfer.setBackground(new java.awt.Color(57, 62, 70));
        button_transfer.setIcon(new javax.swing.ImageIcon(getClass().getResource("../icons/icon_transfer.png"))); // NOI18N
        button_transfer.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        button_transfer.setBorderPainted(false);
        button_transfer.setPreferredSize(new java.awt.Dimension(64, 64));
        button_transfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_transferActionPerformed(evt);
            }
        });

        label_transfer.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        label_transfer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_transfer.setText("Transfer");

        button_emoney.setBackground(new java.awt.Color(57, 62, 70));
        button_emoney.setIcon(new javax.swing.ImageIcon(getClass().getResource("../icons/icon_emoney.png"))); // NOI18N
        button_emoney.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        button_emoney.setBorderPainted(false);
        button_emoney.setPreferredSize(new java.awt.Dimension(64, 64));
        button_emoney.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_emoneyActionPerformed(evt);
            }
        });

        label_emoney.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        label_emoney.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_emoney.setText("E-Money");

        javax.swing.GroupLayout panel_buttonFeatureLayout = new javax.swing.GroupLayout(panel_buttonFeature);
        panel_buttonFeature.setLayout(panel_buttonFeatureLayout);
        panel_buttonFeatureLayout.setHorizontalGroup(
            panel_buttonFeatureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_buttonFeatureLayout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(panel_buttonFeatureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(label_deposit)
                    .addComponent(button_deposit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(panel_buttonFeatureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(label_transfer)
                    .addComponent(button_transfer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(panel_buttonFeatureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(label_withDraw)
                    .addComponent(button_withDraw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(panel_buttonFeatureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(label_emoney)
                    .addComponent(button_emoney, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(92, 92, 92))
        );
        panel_buttonFeatureLayout.setVerticalGroup(
            panel_buttonFeatureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_buttonFeatureLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_buttonFeatureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_buttonFeatureLayout.createSequentialGroup()
                        .addComponent(button_emoney, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_emoney))
                    .addGroup(panel_buttonFeatureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel_buttonFeatureLayout.createSequentialGroup()
                            .addComponent(button_transfer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(label_transfer))
                        .addGroup(panel_buttonFeatureLayout.createSequentialGroup()
                            .addComponent(button_withDraw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(label_withDraw))
                        .addGroup(panel_buttonFeatureLayout.createSequentialGroup()
                            .addComponent(button_deposit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(label_deposit))))
                .addContainerGap())
        );

        javax.swing.GroupLayout panel_mainPanelLayout = new javax.swing.GroupLayout(panel_mainPanel);
        panel_mainPanel.setLayout(panel_mainPanelLayout);
        panel_mainPanelLayout.setHorizontalGroup(
            panel_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_buttonFeature, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panel_mainPanelLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(panel_creditCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );
        panel_mainPanelLayout.setVerticalGroup(
            panel_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_mainPanelLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(panel_creditCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(panel_buttonFeature, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        getContentPane().add(panel_mainPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void button_signOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:
        int signOutConfirm = JOptionPane.showConfirmDialog(rootPane, 
            "Are you sure you want to sign out?", 
            "", 0);

        switch (signOutConfirm) {
            case 0:

                program.logout();
                Screen_SignIn signin = new Screen_SignIn();
                signin.setVisible(true);
                dispose();
                break;

            default:
                break;
        }
    }//GEN-LAST:event_button_signOutActionPerformed

    private void button_depositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_depositActionPerformed
        boolean valid = false;
        int balance = 0;

        do {
            try {
                balance = Integer.parseInt(JOptionPane.showInputDialog(null, 
                    "Enter the amount to deposit :",
                    "Deposit", 3));

                int depositConfirm = JOptionPane.showConfirmDialog(null, 
                    "Deposit Amount\n" +
                    "Rp" + balance + "\n\n" +
                    "Are you sure you want to deposit?", 
                    "Deposit", 0);
                
                if(depositConfirm == 0) {

                    int code = program.saveMoney(balance);

                    switch (code) {
                        case 0:

                            valid = true;
                            String otp = program.getTransactionOTP();
                            Screen_Dashboard dashboard = new Screen_Dashboard();
                            dashboard.getDetails(program);
                            dashboard.setValue();
                            dashboard.setVisible(true);
                            dispose();
                            JOptionPane.showMessageDialog(rootPane, 
                                "OTP : " + otp, 
                                "Deposit", 1);
                            break;
                            
                        case 1:

                            JOptionPane.showMessageDialog(rootPane, 
                                "The amount entered is higher than the limit allowed!", 
                                "", 2);
                            break;
                            
                        case 2:

                            JOptionPane.showMessageDialog(rootPane, 
                                "The amount entered need to be in multiples of Rp50.000!", 
                                "", 2);
                            break;
                            
                        case 5:

                            JOptionPane.showMessageDialog(rootPane, 
                                "Invalid input!", 
                                "", 2);
                            break;
                            
                        default:
                            break;
                    }
                }
            } catch (Exception e) { return; }
        } while (valid == false);
    }//GEN-LAST:event_button_depositActionPerformed

    private void button_withDrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_withDrawActionPerformed
        boolean valid = false;
        int balance = 0;
        do {
            try {
                balance = Integer.parseInt(JOptionPane.showInputDialog(null, 
                    "Enter the amount to withdraw :",
                    "Withdraw", 3));

                int withdrawConfirm = JOptionPane.showConfirmDialog(null, 
                    "Withdraw Amount\n" +
                    "Rp" + balance + "\n\n" +
                    "Are you sure you want to withdraw?", 
                    "Withdraw", 0);

                if(withdrawConfirm == 0) {
                    int code = program.withdrawMoney(balance);
                    switch (code) {
                        case 0:
                            valid = true;
                            String otp = program.getTransactionOTP();

                            Screen_Dashboard dashboard = new Screen_Dashboard();
                            dashboard.getDetails(program);
                            dashboard.setValue();
                            dashboard.setVisible(true);
                            dispose();
                            
                            JOptionPane.showMessageDialog(rootPane, 
                                "OTP : " + otp, 
                                "Withdraw", 1);
                            break;

                        case 1:
                        
                            JOptionPane.showMessageDialog(rootPane, 
                                "The amount entered is higher than the limit allowed!", 
                                "", 2);
                            break;

                        case 2:
                        
                            JOptionPane.showMessageDialog(rootPane, 
                                "The amount entered need to be in multiples of Rp50.000!", 
                                "", 2);
                            break;

                        case 3:
                        
                            JOptionPane.showMessageDialog(rootPane, 
                                "Insufficient credit balance!", 
                                "", 2);
                            break;

                        case 5:

                            JOptionPane.showMessageDialog(rootPane, 
                                "Invalid input!", 
                                "", 2);
                            break;

                        default:
                            break;
                    }
                }

            } catch (Exception e) { return; }
        } while (valid == false);

    }//GEN-LAST:event_button_withDrawActionPerformed

    private void button_transferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_transferActionPerformed

        boolean valid = false;
        int balance = 0;
        int accNum = 0;
        int transferConfirm = 1;
        
        do {
            try {
                
                accNum = Integer.parseInt(JOptionPane.showInputDialog(null, 
                    "Enter destination account number :",
                    "Transfer", 3));

                balance = Integer.parseInt(JOptionPane.showInputDialog(null, 
                    "Enter the amount to transfer :",
                    "Transfer", 3));

                transferConfirm = JOptionPane.showConfirmDialog(null, 
                    "Transfer Amount\n" +
                    "Rp" + balance + "\n" +
                    "To " + accNum + "\n\n" +
                    "Are you sure you want to transfer?", 
                    "Transfer", 0);
                    
                if (transferConfirm == 0) {
                    int code = program.transferMoney(balance, accNum);
                    switch (code) {
                        case 0:

                            valid = true;
                            String date = program.getTransactionDate();
                            String id = program.getTransactionId();

                            Screen_Dashboard dashboard = new Screen_Dashboard();
                            dashboard.getDetails(program);
                            dashboard.setValue();
                            dashboard.setVisible(true);
                            dispose();
                            
                            JOptionPane.showMessageDialog(rootPane, 
                                "Transfer was successful\n\n" +
                                "ID          : " + id + "\n" +
                                "Date        : " + date + "\n" +
                                "Destination : " + accNum + "\n" +
                                "Amount      : Rp" + balance,
                                "Transfer", 1);
                            break;

                        case 3:
                            JOptionPane.showMessageDialog(rootPane, 
                                "Insufficient credit balance!", 
                                "", 2);
                            break;

                        case 6:

                            JOptionPane.showMessageDialog(rootPane, 
                                "Destination account entered doesn't exist!", 
                                "", 2);
                            break;

                        default:
                            break;
                    }
                }
            } catch (Exception e) { return; }
        } while (valid == false);
    }//GEN-LAST:event_button_transferActionPerformed

    private void button_emoneyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_emoneyActionPerformed

        boolean valid = false;
        int balance = 0;
        String telpNum = "";
        
        do {
            try {
                telpNum = JOptionPane.showInputDialog(null, 
                    "Enter destination phone number :",
                    "Top Up E-Money", 3);
                    
                balance = Integer.parseInt(JOptionPane.showInputDialog(null, 
                    "Enter the amount to transfer :",
                    "Top Up E-Money", 3));

                int emoneyConfirm = JOptionPane.showConfirmDialog(null, 
                    "Top Up Amount\n" +
                    "Rp" + balance + "\n" +
                    "To" + telpNum + "\n\n" +
                    "Are you sure you want to top up?", 
                    "Top Up E-Money", 0);      
                              
                if(emoneyConfirm == 0) {
                    int code = program.topupEmoney(balance, telpNum);
                    switch (code) {
                        case 0:

                            valid = true;
                            String date = program.getTransactionDate();
                            String id = program.getTransactionId();
                            
                            Screen_Dashboard dashboard = new Screen_Dashboard();
                            dashboard.getDetails(program);
                            dashboard.setValue();
                            dashboard.setVisible(true);
                            dispose();

                            JOptionPane.showMessageDialog(rootPane, 
                                "Top Up was successful\n\n" +
                                "ID          : " + id + "\n" +
                                "Date        : " + date + "\n" +
                                "Destination : " + telpNum + "\n" +
                                "Amount      : Rp" + balance,
                                "Top Up E-Money", 1);
                            break;

                        case 1:

                            JOptionPane.showMessageDialog(rootPane, 
                                "Insufficient credit balance!", 
                                "", 2);
                            break;
                            
                        case 2:

                            JOptionPane.showMessageDialog(rootPane, 
                                "The amount entered need to be higher than Rp10.000!", 
                                "", 2);
                            break;

                        case 5:

                            JOptionPane.showMessageDialog(rootPane, 
                                "Invalid input!", 
                                "", 2);
                            break;

                        default:
                            break;
                    }
                }
            } catch (Exception e) { return; }
        } while (valid == false);
    }//GEN-LAST:event_button_emoneyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Screen_Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Screen_Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Screen_Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Screen_Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Screen_Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_emoney;
    private javax.swing.JButton button_signOut;
    private javax.swing.JButton button_deposit;
    private javax.swing.JButton button_transfer;
    private javax.swing.JButton button_withDraw;
    private javax.swing.JLabel label_balanceHeader;
    private javax.swing.JLabel label_cardBalance;
    private javax.swing.JLabel label_cardNum;
    private javax.swing.JLabel label_cardType;
    private javax.swing.JLabel label_exDate;
    private javax.swing.JLabel label_fullName;
    private javax.swing.JLabel label_iconUser;
    private javax.swing.JLabel label_title;
    private javax.swing.JLabel label_deposit;
    private javax.swing.JLabel label_withDraw;
    private javax.swing.JLabel label_transfer;
    private javax.swing.JLabel label_emoney;
    private javax.swing.JPanel panel_account;
    private javax.swing.JPanel panel_buttonFeature;
    private javax.swing.JPanel panel_creditCard;
    private javax.swing.JPanel panel_footer;
    private javax.swing.JPanel panel_header;
    private javax.swing.JPanel panel_mainPanel;
    private javax.swing.JPanel panel_sidePanel;
    private javax.swing.JPanel panel_transHistory;
    private javax.swing.JScrollPane sp_transHistory;
    private javax.swing.JTable table_transHistory;
    // End of variables declaration//GEN-END:variables
}
